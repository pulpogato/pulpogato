import de.undercouch.gradle.tasks.download.Download

plugins {
    id("java-library")
    id("com.netflix.dgs.codegen")
    id("com.github.rahulsom.waena.published")
    id("de.undercouch.download")
}

dependencies {
    api("com.fasterxml.jackson.core:jackson-databind:2.+")
}

private String getUrl(String projectVariant) {
    if (projectVariant =~ /ghes-\d+\.\d+/) {
        "https://docs.github.com/public/${projectVariant}/schema.docs-enterprise.graphql"
    } else {
        "https://docs.github.com/public/${projectVariant}/schema.docs.graphql"
    }
}

var projectVariant = project.name.replace("javacat-graphql-", "")

def downloadSchema = tasks.register("downloadSchema", Download) {
    src getUrl(projectVariant)
    dest "${project.layout.buildDirectory.get()}/resources/main/schema.graphqls"
    onlyIfModified true
    tempAndMove true
    useETag true

    inputs.property("url", getUrl(projectVariant))
    outputs.file("${project.layout.buildDirectory.get()}/resources/main/schema.graphqls")
}

generateJava {
    dependsOn(downloadSchema)
    schemaPaths = ["${project.layout.buildDirectory.get()}/resources/main/schema.graphqls"]
    packageName = "com.github.rahulsom.javacat.graphql"
    generateClientv2 = true
    includeQueries = [""]
    includeMutations = [""]

    typeMapping = [
            "Base64String"   : "java.lang.String",
            "BigInt"         : "java.math.BigInteger",
            "Date"           : "java.time.LocalDate",
            "DateTime"       : "java.time.LocalDateTime",
            "GitObjectID"    : "java.lang.String",
            "GitRefname"     : "java.lang.String",
            "GitSSHRemote"   : "java.lang.String",
            "GitTimestamp"   : "java.time.OffsetDateTime",
            "HTML"           : "java.lang.String",
            "PreciseDateTime": "java.time.OffsetDateTime",
            "URI"            : "java.net.URI",
            "X509Certificate": "java.lang.String",
    ]

    doLast {
        delete(files("${project.layout.buildDirectory.get()}/generated/sources/dgs-codegen/**/DgsConstants.java"))
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.processResources.dependsOn(downloadSchema)

tasks.withType(Javadoc).configureEach {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

